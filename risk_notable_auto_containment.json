{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Risk Notable",
    "coa": {
        "data": {
            "description": "Implements an auto-containment of available assets and identities found in artifacts with high risk scores or confirmed threats.",
            "edges": [
                {
                    "id": "port_0_to_port_3",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_2",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_5_to_port_6",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_11_to_port_1",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_4_to_port_12",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "id": "port_10_to_port_4",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_15_to_port_10",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_7_to_port_13",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_9_to_port_13",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_13_to_port_14",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "id": "port_13_to_port_15",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_14_to_port_10",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_4_to_port_11",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_12_to_port_1",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_5",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_2_to_port_6",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_6_to_port_9",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_10_to_port_16",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_16_to_port_17",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                }
            ],
            "hash": "032b41e97345a418f43a037e99836d060f9368f8",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 360,
                    "y": 0
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 190,
                    "y": 1684
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "format containment note",
                            "customNameId": 0,
                            "description": "Format a custom report based on which playbooks were dispatched",
                            "join": [],
                            "note": "Format a custom report based on which playbooks were dispatched"
                        },
                        "functionId": 1,
                        "functionName": "format_containment_note",
                        "id": "10",
                        "inputParameters": [
                            "dispatch_asset_containment_playbooks:playbook_output:playbook_run_id_list",
                            "dispatch_identity_containment_playbooks:playbook_output:playbook_run_id_list",
                            "get_not_contained_indicators:custom_function_result.data.*.indicator_value",
                            "get_not_contained_indicators:custom_function_result.data.*.indicator_tags",
                            "collect_hosts_and_users:custom_function_result.data.*.artifact_value",
                            "get_contained_indicators:custom_function_result.data.*.indicator_value"
                        ],
                        "outputVariables": [
                            "note_title",
                            "note_content"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "code",
                    "userCode": "    from itertools import zip_longest\n    \n    format_containment_note__note_title = \"\"\n    format_containment_note__note_content = \"\"\n    \n    def playbook_report(pb_run_id):\n        pb_run_url = phantom.build_phantom_rest_url('playbook_run', pb_run_id)\n        response = phantom.requests.get(pb_run_url, verify=False).json()\n        if response.get('id'):\n            message = json.loads(response['message'])\n            formatted_content = f\"\\n#### Playbook Executed - {message['playbook']}\\n\"\n            formatted_content += (\n                \"| status | action | app | parameters |\\n\"\n                \"| --- | --- | --- | --- |\\n\"\n            )\n            for result_item in message['result']:\n                app_dict = {}\n                for item in result_item['app_runs']:\n                    param = item['parameter']\n                    param.pop('context', None)\n                    if item['app'] not in app_dict.keys():\n                        app_dict[item['app']] = {'success': [], 'failed': []}\n                    if item['status'] == 'success':\n                        app_dict[item['app']]['success'].append(param)\n                    if item['status'] == 'failed':\n                        app_dict[item['app']]['failed'].append(param)\n                for app, params in app_dict.items():\n                    if params['success']:\n                        formatted_content += f\"| success | {result_item['action']} | {app} | ```{params['success']}``` |\\n\"\n                    if params['failed']:\n                        formatted_content += f\"| failed | {result_item['action']} | {app} | ```{params['failed']}``` |\\n\"\n            return formatted_content + \"\\n&nbsp;\\n\\n&nbsp;\\n\"\n    \n    asset_list = []\n    asset_contained_list = []\n    identity_list = []\n    identity_contained_list = []\n    misc_not_contained_list = []\n    \n    for i_value, i_tag in zip(get_not_contained_indicators_data___indicator_value, get_not_contained_indicators_data___indicator_tags):\n        if i_tag:\n            if 'known_asset' in i_tag:\n                asset_list.append(i_value.lower())\n                if 'contained' in i_tag:\n                    asset_contained_list.append(i_value.lower())\n            if 'known_identity' in i_tag:\n                identity_list.append(i_value.lower())\n                if 'contained' in i_tag:\n                    identity_contained_list.append(i_value.lower())\n    \n    for value in collect_hosts_and_users_data___artifact_value:\n        if value.lower() not in asset_list and value.lower() not in identity_list:\n            misc_not_contained_list.append(value)\n                \n    if dispatch_asset_containment_playbooks_output_playbook_run_id_list_values:\n        format_containment_note__note_content += (\n            \"## Asset Containment Report\\n\\n\"\n            \"| Known Assets from event | Known Assets contained |\\n\"\n            \"| --- | --- |\\n\"\n        )\n        for zipped_list in zip_longest(asset_list, asset_contained_list, fillvalue=\" \"):\n            format_containment_note__note_content += f\"| {zipped_list[0]} | {zipped_list[1]} |\\n\"\n        for run_id in dispatch_asset_containment_playbooks_output_playbook_run_id_list_values:\n            format_containment_note__note_content += playbook_report(run_id)\n\n    if dispatch_identity_containment_playbooks_output_playbook_run_id_list_values:\n        format_containment_note__note_content += (\n            \"## Identity Containment Report\\n\\n\"\n            \"| Known Identities from event | Known Identities contained |\\n\"\n            \"| --- | --- |\\n\"\n        )\n        for zipped_list in zip_longest(identity_list, identity_contained_list, fillvalue=\" \"):\n            format_containment_note__note_content += f\"| {zipped_list[0]} | {zipped_list[1]} |\\n\"\n        for run_id in dispatch_identity_containment_playbooks_output_playbook_run_id_list_values:\n            format_containment_note__note_content += playbook_report(run_id)\n    \n    if misc_not_contained_list:\n        misc_not_contained_list = set(misc_not_contained_list)\n        format_containment_note__note_content += f\"## Unidentified Entities Not Contained \\n\"\n        for item in misc_not_contained_list:\n            format_containment_note__note_content += f\"- {item}\\n\"\n        format_containment_note__note_content += \"(Manual action may be required)\"\n                \n    if format_containment_note__note_content:\n        format_containment_note__note_title = \"[Auto-Generated] Containment Summary\"\n\n",
                    "x": 340,
                    "y": 1148
                },
                "11": {
                    "data": {
                        "advanced": {
                            "customName": "add Risk Recovery workbook",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_add",
                            "repoName": "community"
                        },
                        "functionId": 4,
                        "functionName": "add_risk_recovery_workbook",
                        "id": "11",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_add": {
                                "description": "Add a workbook to a container. Provide a container id and a workbook name or id",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "A phantom container id",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "A workbook name or id",
                                        "inputType": "item",
                                        "label": "workbook",
                                        "name": "workbook",
                                        "placeholder": "my_workbook",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Defaults to True. Check to see if workbook already exists in container before adding.",
                                        "inputType": "item",
                                        "label": "check_for_existing_workbook",
                                        "name": "check_for_existing_workbook",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Defaults to True. Sets the added workbook to the current phase.",
                                        "inputType": "item",
                                        "label": "start_workbook",
                                        "name": "start_workbook",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_add",
                                "name": "workbook_add"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_add": {
                                "check_for_existing_workbook": "True",
                                "container": "container:id",
                                "start_workbook": "True",
                                "workbook": "Risk Recovery"
                            }
                        }
                    },
                    "errors": {},
                    "id": "11",
                    "type": "utility",
                    "x": 0,
                    "y": 1513
                },
                "12": {
                    "data": {
                        "advanced": {
                            "customName": "mark containment report as evidence",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "mark_evidence",
                            "repoName": "community"
                        },
                        "functionId": 5,
                        "functionName": "mark_containment_report_as_evidence",
                        "id": "12",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "mark_evidence": {
                                "description": "Mark an object as Evidence in a container",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container ID or Container Object",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The object to mark as evidence. This could be a vault_id, artifact_id, note_id, container_id, or action_run_id. If the previous playbook block is an action then \"keyword_argument:results\" can be used for the action_run_id with the content_type \"action_run_id\". Vault_id can be an ID or a vault hash.",
                                        "inputType": "item",
                                        "label": "input_object",
                                        "name": "input_object",
                                        "placeholder": "artifact id, note id, vault_id, etc.",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The content type of the object to add as evidence which must be one of the following:\n            \n            vault_id\n            artifact_id\n            container_id\n            note_id\n            action_run_id",
                                        "inputType": "item",
                                        "label": "content_type",
                                        "name": "content_type",
                                        "placeholder": "See help text for supported types",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "mark_evidence",
                                "name": "mark_evidence"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "mark_evidence": {
                                "container": "container:id",
                                "content_type": "note_id",
                                "input_object": "close_protect_task:custom_function_result.data.note_id"
                            }
                        }
                    },
                    "errors": {},
                    "id": "12",
                    "type": "utility",
                    "x": 340,
                    "y": 1513
                },
                "13": {
                    "data": {
                        "advanced": {
                            "customName": "get not contained indicators",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "indicator_get_by_tag",
                            "repoName": "community"
                        },
                        "functionId": 6,
                        "functionName": "get_not_contained_indicators",
                        "id": "13",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "indicator_get_by_tag": {
                                "description": "Get indicator(s) by tags.",
                                "fields": [
                                    {
                                        "dataTypes": [],
                                        "description": "Comma separated list of tags. Tags will be OR'd together: e.g. tag1 OR tag2 OR tag3. Tags do not support whitespace and whitespace will be automatically removed.",
                                        "inputType": "item",
                                        "label": "tags_or",
                                        "name": "tags_or",
                                        "placeholder": "tag1,tag2,...tagK",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Comma separated list of tags. Tags will be AND'd together: e.g. tag1 AND tag2 AND tag3. Tags do not support whitespace and whitespace will be automatically removed.",
                                        "inputType": "item",
                                        "label": "tags_and",
                                        "name": "tags_and",
                                        "placeholder": "tag1,tag2,...tagK",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Defaults to last_30_days\noptions:\ntoday\nyesterday\nthis_week\nthis_month\nlast_7_days\nlast_30_days\nlast_week\nlast_month",
                                        "inputType": "item",
                                        "label": "indicator_timerange",
                                        "name": "indicator_timerange",
                                        "placeholder": "last_30_days",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to ensure the fetched indicator exists in the supplied container.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Comma separated list of tags to filter out. If the indicator's tags contain any of the values in this list, they will be omitted from the output.",
                                        "inputType": "item",
                                        "label": "tags_exclude",
                                        "name": "tags_exclude",
                                        "placeholder": "tag1, tag2",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "indicator_get_by_tag",
                                "name": "indicator_get_by_tag"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "indicator_get_by_tag": {
                                "container": "container:id",
                                "indicator_timerange": null,
                                "tags_and": null,
                                "tags_exclude": "",
                                "tags_or": "known_identity, known_asset"
                            }
                        }
                    },
                    "errors": {},
                    "id": "13",
                    "type": "utility",
                    "x": 340,
                    "y": 820
                },
                "14": {
                    "data": {
                        "advanced": {
                            "customName": "collect hosts and users",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "collect_by_cef_type",
                            "repoName": "community"
                        },
                        "functionId": 7,
                        "functionName": "collect_hosts_and_users",
                        "id": "14",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "collect_by_cef_type": {
                                "description": "Collect all artifact values that match the desired CEF data types, such as \"ip\", \"url\", \"sha1\", or \"all\". Optionally also filter for artifacts that have the specified tags.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container ID or container object.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type to collect values for. This could be a single string or a comma separated list such as \"hash,filehash,file_hash\". The special value \"all\" can also be used to collect all field values from all artifacts.",
                                        "inputType": "item",
                                        "label": "data_types",
                                        "name": "data_types",
                                        "placeholder": "data_type1, data_type2, data_type3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "If tags are provided, only return fields from artifacts that have all of the provided tags. This could be an individual tag or a comma separated list.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1,tag2,tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Defaults to 'new'. Define custom scope. Advanced Settings Scope is not passed to a custom function. Options are 'all' or 'new'.",
                                        "inputType": "item",
                                        "label": "scope",
                                        "name": "scope",
                                        "placeholder": "new",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "collect_by_cef_type",
                                "name": "collect_by_cef_type"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "collect_by_cef_type": {
                                "container": "container:id",
                                "data_types": "user, user name, username, user_name, host, host name, hostname, host_name",
                                "scope": "all",
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "14",
                    "type": "utility",
                    "x": 510,
                    "y": 992
                },
                "15": {
                    "data": {
                        "advanced": {
                            "customName": "get contained indicators",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "indicator_get_by_tag",
                            "repoName": "community"
                        },
                        "functionId": 8,
                        "functionName": "get_contained_indicators",
                        "id": "15",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "indicator_get_by_tag": {
                                "description": "Get indicator(s) by tags.",
                                "fields": [
                                    {
                                        "dataTypes": [],
                                        "description": "Comma separated list of tags. Tags will be OR'd together: e.g. tag1 OR tag2 OR tag3. Tags do not support whitespace and whitespace will be automatically removed.",
                                        "inputType": "item",
                                        "label": "tags_or",
                                        "name": "tags_or",
                                        "placeholder": "tag1,tag2,...tagK",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Comma separated list of tags. Tags will be AND'd together: e.g. tag1 AND tag2 AND tag3. Tags do not support whitespace and whitespace will be automatically removed.",
                                        "inputType": "item",
                                        "label": "tags_and",
                                        "name": "tags_and",
                                        "placeholder": "tag1,tag2,...tagK",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Defaults to last_30_days\noptions:\ntoday\nyesterday\nthis_week\nthis_month\nlast_7_days\nlast_30_days\nlast_week\nlast_month",
                                        "inputType": "item",
                                        "label": "indicator_timerange",
                                        "name": "indicator_timerange",
                                        "placeholder": "last_30_days",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to ensure the fetched indicator exists in the supplied container.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Comma separated list of tags to filter out. If the indicator's tags contain any of the values in this list, they will be omitted from the output.",
                                        "inputType": "item",
                                        "label": "tags_exclude",
                                        "name": "tags_exclude",
                                        "placeholder": "tag1, tag2",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "indicator_get_by_tag",
                                "name": "indicator_get_by_tag"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "indicator_get_by_tag": {
                                "container": "container:id",
                                "indicator_timerange": null,
                                "tags_and": null,
                                "tags_exclude": null,
                                "tags_or": "contained"
                            }
                        }
                    },
                    "errors": {},
                    "id": "15",
                    "type": "utility",
                    "x": 170,
                    "y": 984
                },
                "16": {
                    "data": {
                        "advanced": {
                            "customName": "notable artifact filter",
                            "customNameId": 0,
                            "description": "Finds artifacts with a notable event_id",
                            "join": [],
                            "note": "Finds artifacts with a notable event_id"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.event_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "notable artifact",
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "notable_artifact_filter",
                        "id": "16",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "filter",
                    "x": 740,
                    "y": 1326
                },
                "17": {
                    "data": {
                        "action": "update event",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "update splunk",
                            "customNameId": 0,
                            "description": "Updates Splunk Enterprise Security with a containment action note.",
                            "join": [],
                            "note": "Updates Splunk Enterprise Security with a containment action note."
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunk"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "update_splunk",
                        "id": "17",
                        "parameters": {
                            "comment": {
                                "functionId": 1,
                                "parameters": [
                                    "container:url",
                                    "format_containment_note:custom_function:note_content"
                                ],
                                "template": "From event: {0}\n\n{1}"
                            },
                            "event_ids": "filtered-data:notable_artifact_filter:condition_1:artifact:*.cef.event_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "event_ids"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "action",
                    "x": 680,
                    "y": 1506
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "start protect task",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_task_update",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "start_protect_task",
                        "id": "2",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_task_update": {
                                "description": "Update a workbook task by task name",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Name of a workbook task (Required)",
                                        "inputType": "item",
                                        "label": "task_name",
                                        "name": "task_name",
                                        "placeholder": "my_task",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Note title goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_title",
                                        "name": "note_title",
                                        "placeholder": "My Title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Body of note goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_content",
                                        "name": "note_content",
                                        "placeholder": "My notes",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "One of: incomplete, in_progress, complete (Optional)",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "in_progress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Assigns task to provided owner. Accepts keyword 'current\" to assign task to currently running playbook user. (Optional)",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "username",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "ID of Phantom Container (Required)",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_task_update",
                                "name": "workbook_task_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_task_update": {
                                "container": "container:id",
                                "note_content": null,
                                "note_title": null,
                                "owner": null,
                                "status": "in_progress",
                                "task_name": "Protect Assets and Users"
                            }
                        }
                    },
                    "errors": {},
                    "id": "2",
                    "type": "utility",
                    "x": 510,
                    "y": 320
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "add Risk Response workbook",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_add",
                            "repoName": "community"
                        },
                        "functionId": 2,
                        "functionName": "add_risk_response_workbook",
                        "id": "3",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_add": {
                                "description": "Add a workbook to a container. Provide a container id and a workbook name or id",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "A phantom container id",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "A workbook name or id",
                                        "inputType": "item",
                                        "label": "workbook",
                                        "name": "workbook",
                                        "placeholder": "my_workbook",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Defaults to True. Check to see if workbook already exists in container before adding.",
                                        "inputType": "item",
                                        "label": "check_for_existing_workbook",
                                        "name": "check_for_existing_workbook",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Defaults to True. Sets the added workbook to the current phase.",
                                        "inputType": "item",
                                        "label": "start_workbook",
                                        "name": "start_workbook",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_add",
                                "name": "workbook_add"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_add": {
                                "check_for_existing_workbook": "True",
                                "container": "container:id",
                                "start_workbook": "True",
                                "workbook": "Risk Response"
                            }
                        }
                    },
                    "errors": {},
                    "id": "3",
                    "type": "utility",
                    "x": 510,
                    "y": 148
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "close protect task",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "workbook_task_update",
                            "repoName": "community"
                        },
                        "functionId": 3,
                        "functionName": "close_protect_task",
                        "id": "4",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "workbook_task_update": {
                                "description": "Update a workbook task by task name",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Name of a workbook task (Required)",
                                        "inputType": "item",
                                        "label": "task_name",
                                        "name": "task_name",
                                        "placeholder": "my_task",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Note title goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_title",
                                        "name": "note_title",
                                        "placeholder": "My Title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Body of note goes here (Optional)",
                                        "inputType": "item",
                                        "label": "note_content",
                                        "name": "note_content",
                                        "placeholder": "My notes",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "One of: incomplete, in_progress, complete (Optional)",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "in_progress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "Assigns task to provided owner. Accepts keyword 'current\" to assign task to currently running playbook user. (Optional)",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "username",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "ID of Phantom Container (Required)",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "workbook_task_update",
                                "name": "workbook_task_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "workbook_task_update": {
                                "container": "container:id",
                                "note_content": "format_containment_note:custom_function:note_content",
                                "note_title": "format_containment_note:custom_function:note_title",
                                "owner": null,
                                "status": "complete",
                                "task_name": "Protect Assets and Users"
                            }
                        }
                    },
                    "errors": {},
                    "id": "4",
                    "type": "utility",
                    "x": 170,
                    "y": 1342
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "Tag Assets and Identities",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "tag_assets_and_identities",
                        "id": "5",
                        "inputs": {},
                        "playbookName": "splunk_enterprise_security_tag_assets_and_identities",
                        "playbookRepo": 2,
                        "playbookRepoName": "local",
                        "playbookType": "automation",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "playbook",
                    "x": 170,
                    "y": 312
                },
                "6": {
                    "data": {
                        "advanced": {
                            "customName": "high risk artifact filter",
                            "customNameId": 0,
                            "description": "Isolate artifacts with tags \"high_risk_score\" or \"high_threat\"",
                            "join": [],
                            "note": "Isolate artifacts with tags \"high_risk_score\" or \"high_threat\"",
                            "scope": "all"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "high_threat",
                                        "value": "artifact:*.tags"
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "high_risk_score",
                                        "value": "artifact:*.tags"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "high threats",
                                "logic": "or"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "high_risk_artifact_filter",
                        "id": "6",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "filter",
                    "x": 400,
                    "y": 476
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "dispatch identity containment playbooks",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 1,
                        "functionName": "dispatch_identity_containment_playbooks",
                        "id": "7",
                        "inputs": {
                            "artifact_ids_include": {
                                "datapaths": [
                                    "filtered-data:high_risk_artifact_filter:condition_1:artifact:*.id"
                                ],
                                "deduplicate": false
                            },
                            "indicator_tags_exclude": {
                                "datapaths": [
                                    "contained"
                                ],
                                "deduplicate": false
                            },
                            "indicator_tags_include": {
                                "datapaths": [
                                    "known_identity"
                                ],
                                "deduplicate": false
                            },
                            "playbook_repo": {
                                "datapaths": [
                                    "local"
                                ],
                                "deduplicate": false
                            },
                            "playbook_tags": {
                                "datapaths": [
                                    "identity",
                                    "containment"
                                ],
                                "deduplicate": false
                            }
                        },
                        "playbookName": "dispatch_input_playbooks",
                        "playbookRepo": 1,
                        "playbookRepoName": "community",
                        "playbookType": "data",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "playbook",
                    "x": 170,
                    "y": 656
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "dispatch asset containment playbooks",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 1,
                        "functionName": "dispatch_asset_containment_playbooks",
                        "id": "9",
                        "inputs": {
                            "artifact_ids_include": {
                                "datapaths": [
                                    "filtered-data:high_risk_artifact_filter:condition_1:artifact:*.id"
                                ],
                                "deduplicate": false
                            },
                            "indicator_tags_exclude": {
                                "datapaths": [
                                    "contained"
                                ],
                                "deduplicate": false
                            },
                            "indicator_tags_include": {
                                "datapaths": [
                                    "known_asset"
                                ],
                                "deduplicate": false
                            },
                            "playbook_repo": {
                                "datapaths": [
                                    "local"
                                ],
                                "deduplicate": false
                            },
                            "playbook_tags": {
                                "datapaths": [
                                    "asset",
                                    "containment"
                                ],
                                "deduplicate": false
                            }
                        },
                        "playbookName": "dispatch_input_playbooks",
                        "playbookRepo": 1,
                        "playbookRepoName": "community",
                        "playbookType": "data",
                        "synchronous": true,
                        "type": "playbook"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "playbook",
                    "x": 510,
                    "y": 656
                }
            },
            "notes": "- Change \"high_risk_artifact_filter\" as needed to control which artifacts are sent to containment\n- For detailed implementation see https://docs.splunk.com/Documentation/ESSOC/latest/user/Useplaybookpack"
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.1.84890"
    },
    "create_time": "2022-06-04T11:43:15.659320+00:00",
    "draft_mode": false,
    "labels": [
        "risk_notable"
    ],
    "tags": [
        "response_option"
    ]
}